/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package stream

import com.beust.klaxon.*
import java.io.BufferedReader
import java.io.FileReader
import java.time.Duration
import java.time.Instant

private val klaxon = Klaxon()

class App {
  val greeting: String
    get() {
      return "Hello World!"
    }
}

fun main() {
  val startTime = Instant.now()

  val filePath =
      "../../../../data-generator/short-product-data.ndjson" // Replace with your file name or path

  var countryCounts: MutableMap<String, Int> = mutableMapOf<String, Int>()

  BufferedReader(FileReader(filePath)).use { reader ->
    reader.readLines().forEach { line ->
      run {
        val product = Product.fromJson(line)

        for (price in product?.prices.orEmpty()) {
          countryCounts.set(price.country, countryCounts.getOrPut(price.country) { 0 })
        }

        // Read the next line
      }
    }

    val endTime = Instant.now()
    val executionTime = Duration.between(startTime, endTime).toMillis()
    println(klaxon.toJsonString(countryCounts))
    println("Execution time: $executionTime milliseconds")
  }
}

// To parse the JSON, install Klaxon and do:
//
//   val product = Product.fromJson(jsonString)

data class Product(
    @Json(name = "Id") val id: Double,
    @Json(name = "Name") val name: String,
    @Json(name = "Description") val description: String,
    @Json(name = "Prices") val prices: List<Price>,
    @Json(name = "Created") val created: String,
    @Json(name = "CreatedFormat") val createdFormat: String
) {
  public fun toJson() = klaxon.toJsonString(this)

  companion object {
    public fun fromJson(json: String) = klaxon.parse<Product>(json)
  }
}

data class Price(
    @Json(name = "Country") val country: String,
    @Json(name = "Price") val price: Double
)
